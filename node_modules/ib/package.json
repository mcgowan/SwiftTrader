{
  "name": "ib",
  "description": "Interactive Brokers TWS (or IB Gateway) API client library for Node.js",
  "version": "0.1.0",
  "license": "MIT",
  "author": {
    "name": "Pilwon Huh",
    "email": "pilwon@gmail.com"
  },
  "homepage": "https://github.com/pilwon/node-ib",
  "repository": {
    "type": "git",
    "url": "git://github.com/pilwon/node-ib.git"
  },
  "keywords": [
    "interactive",
    "brokers",
    "tws",
    "twsapi",
    "ib",
    "gateway",
    "finance",
    "stock",
    "bond",
    "option",
    "forex",
    "future",
    "ticker",
    "symbol",
    "quote",
    "market",
    "data",
    "automated",
    "invest",
    "trade",
    "trading",
    "system",
    "api",
    "client",
    "library"
  ],
  "dependencies": {
    "command-buffer": "~0.1.0",
    "lodash": "~2.2.1"
  },
  "devDependencies": {
    "colors": "~0.6.2",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.7.0",
    "matchdep": "~0.3.0",
    "mocha": "~1.13.0",
    "moment": "~2.4.0"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "grunt test"
  },
  "readme": "[![Logo](https://raw.github.com/pilwon/node-ib/master/logo.jpg)](http://interactivebrokers.com/)\n\n[![NPM](https://nodei.co/npm/ib.png?downloads=false&stars=false)](https://npmjs.org/package/ib) [![NPM](https://nodei.co/npm-dl/ib.png?months=6)](https://npmjs.org/package/ib)\n\n`ib` is [Interactive Brokers](http://interactivebrokers.com/) TWS (or IB Gateway) API client library for [Node.js](http://nodejs.org/).\n\nThis is a direct port of Interactive Brokers' official Java client. There is no C++/Java library dependency. It makes a socket connection to TWS (or IB Gateway) using the [net](http://nodejs.org/api/net.html) module, and all messages are entirely processed in JavaScript. It uses [EventEmitter](http://nodejs.org/api/events.html) to pass the result back to user.\n\nIf you're looking for a version that wraps Interactive Brokers' official C++ client, check out [Jae Yang (dchem)](https://github.com/dchem)'s [node-ibapi-addon](https://github.com/dchem/node-ibapi-addon).\n\n\n## Installation\n\n    $ npm install ib\n\n\n## Usage\n\n```js\nvar ib = new (require('ib'))({\n  // clientId: 0,\n  // host: '127.0.0.1',\n  // port: 7496\n}).on('error', function (err) {\n  console.error('error --- %s', err.message);\n}).on('result', function (event, args) {\n  console.log('%s --- %s', event, JSON.stringify(args));\n}).once('nextValidId', function (orderId) {\n  ib.placeOrder(\n    orderId,\n    ib.contract.stock('AAPL'),\n    ib.order.limit('BUY', 1, 0.01)  // safe, unreal value used for demo\n  );\n  ib.reqOpenOrders();\n}).once('openOrderEnd', function () {\n  ib.disconnect();\n})\n\nib.connect()\n  .reqIds(1);\n```\n\n* [See more comprehensive examples here.](https://github.com/pilwon/node-ib/tree/master/examples)\n\n\n## API\n\n### Connection\n\n```js\n.connect()\n.disconnect()\n```\n\n### Commands\n\n```js\n.calculateImpliedVolatility(reqId, contract, optionPrice, underPrice)\n.calculateOptionPrice(reqId, contract, volatility, underPrice)\n.cancelAccountSummary(reqId)\n.cancelCalculateImpliedVolatility(reqId)\n.cancelCalculateOptionPrice(reqId)\n.cancelFundamentalData(reqId)\n.cancelHistoricalData(tickerId)\n.cancelMktData(tickerId)\n.cancelMktDepth(tickerId)\n.cancelNewsBulletins()\n.cancelOrder(id)\n.cancelPositions()\n.cancelRealTimeBars(tickerId)\n.cancelScannerSubscription(tickerId)\n.exerciseOptions(tickerId, contract, exerciseAction, exerciseQuantity, account, override)\n.placeOrder(id, contract, order)\n.replaceFA(faDataType, xml)\n.reqAccountSummary(reqId, group, tags)\n.reqAccountUpdates(subscribe, acctCode)\n.reqAllOpenOrders()\n.reqAutoOpenOrders(bAutoBind)\n.reqContractDetails(reqId, contract)\n.reqCurrentTime()\n.reqExecutions(reqId, filter)\n.reqFundamentalData(reqId, contract, reportType)\n.reqGlobalCancel()\n.reqHistoricalData(tickerId, contract, endDateTime, durationStr, barSizeSetting, whatToShow, useRTH, formatDate)\n.reqIds(numIds)\n.reqManagedAccts()\n.reqMarketDataType(marketDataType)\n.reqMktData(tickerId, contract, genericTickList, snapshot)\n.reqMktDepth(tickerId, contract, numRows)\n.reqNewsBulletins(allMsgs)\n.reqOpenOrders()\n.reqPositions()\n.reqRealTimeBars(tickerId, contract, barSize, whatToShow, useRTH)\n.reqScannerParameters()\n.reqScannerSubscription(tickerId, subscription)\n.requestFA(faDataType)\n.setServerLogLevel(logLevel)\n```\n\n### Events\n\n```js\n// General\n.on('error', function (err, data))\n.on('result', function (event, args))  // exclude connection\n.on('all', function (event, args))  // error + connection + result\n\n// Connection\n.on('connected', function ())\n.on('disconnected', function ())\n.on('received', function (tokens, data))\n.on('sent', function (tokens, data))\n.on('server', function (version, connectionTime))\n\n// Result\n.on('accountDownloadEnd', function (accountName))\n.on('accountSummary', function (reqId, account, tag, value, currency))\n.on('accountSummaryEnd', function (reqId))\n.on('bondContractDetails', function (reqId, contract))\n.on('commissionReport', function (commissionReport))\n.on('contractDetails', function (reqId, contract))\n.on('contractDetailsEnd', function (reqId))\n.on('currentTime', function (time))\n.on('deltaNeutralValidation', function (reqId, underComp))\n.on('execDetails', function (reqId, contract, exec))\n.on('execDetailsEnd', function (reqId))\n.on('fundamentalData', function (reqId, data))\n.on('historicalData', function (reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps))\n.on('managedAccounts', function (accountsList))\n.on('marketDataType', function (reqId, marketDataType))\n.on('nextValidId', function (orderId))\n.on('openOrder', function (orderId, contract, order, orderState))\n.on('openOrderEnd', function ())\n.on('orderStatus', function (id, status, filled, remaining, avgFillPrice, permId, parentId, lastFillPrice, clientId, whyHeld))\n.on('position', function (account, contract, pos, avgCost))\n.on('positionEnd', function ())\n.on('realtimeBar', function (reqId, time, open, high, low, close, volume, wap, count))\n.on('receiveFA', function (faDataType, xml))\n.on('scannerData', function (tickerId, rank, contract, distance, benchmark, projection, legsStr))\n.on('scannerDataEnd', function (tickerId))\n.on('scannerParameters', function (xml))\n.on('tickEFP', function (tickerId, tickType, basisPoints, formattedBasisPoints, impliedFuturesPrice, holdDays, futureExpiry, dividendImpact, dividendsToExpiry))\n.on('tickGeneric', function (tickerId, tickType, value))\n.on('tickOptionComputation', function (tickerId, tickType, impliedVol, delta, optPrice, pvDividend, gamma, vega, theta, undPrice))\n.on('tickPrice', function (tickerId, tickType, price, canAutoExecute))\n.on('tickSize', function (tickerId, sizeTickType, size))\n.on('tickSnapshotEnd', function (reqId))\n.on('tickString', function (tickerId, tickType, value))\n.on('updateAccountTime', function (timeStamp))\n.on('updateAccountValue', function (key, value, currency, accountName))\n.on('updateMktDepth', function (id, position, operation, side, price, size))\n.on('updateMktDepthL2', function (id, position, marketMaker, operation, side, price, size))\n.on('updateNewsBulletin', function (newsMsgId, newsMsgType, newsMessage, originatingExch))\n.on('updatePortfolio', function (contract, position, marketPrice, marketValue, averageCost, unrealizedPNL, realizedPNL, accountName))\n```\n\n* [See Java client code for argument types (Boolean/Number/String)](https://github.com/pilwon/node-ib/blob/master/ref/client/EWrapper.java)\n\n### Builders\n\n```js\n// Contract\n.contract.combo(symbol, currency, exchange)\n.contract.forex(symbol, currency)\n.contract.future(symbol, expiry, currency)\n.contract.option(symbol, expiry, strike, right, exchange, currency)\n.contract.stock(symbol, exchange, currency)\n\n// Order\n.order.limit(action, quantity, price)\n```\n\n### Util\n\n```js\n.incomingToString(incoming)\n.numberToString(number)\n.outgoingToString(outgoing)\n.tickTypeToString(tickType)\n```\n\n\n## Credits\n\n  See the [contributors](https://github.com/pilwon/node-ib/graphs/contributors).\n\n\n## License\n\n<pre>\nThe MIT License (MIT)\n\nCopyright (c) 2013 Pilwon Huh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</pre>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pilwon/node-ib/issues"
  },
  "_id": "ib@0.1.0",
  "dist": {
    "shasum": "2b16e06325c4def9d2b4fccbf985bcd47ee57efc"
  },
  "_from": "ib@",
  "_resolved": "https://registry.npmjs.org/ib/-/ib-0.1.0.tgz"
}
